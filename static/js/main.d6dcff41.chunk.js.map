{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","document","getElementById","props","this","loadModels","console","log","Promise","faceapi","faceRecognitionNet","loadFromUri","process","faceLandmark68Net","ssdMobilenetv1","start","alert","all","then","container","createElement","style","position","body","append","loadLabeledImages","labeledFaceDescriptors","faceMatcher","image","remove","canvas","k","refs","video","getScreenshot","displaySize","width","height","withFaceLandmarks","withFaceDescriptors","detections","resizedDetections","map","d","findBestMatch","descriptor","forEach","result","i","box","detection","DrawBox","label","toString","draw","distance","a","descriptions","img","withFaceDescriptor","push","className","audio","videoConstraints","facingMode","ref","Component","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+XAOqBA,GAFDC,SAASC,eAAe,e,YAG1C,WAAYC,GAAQ,qEACZA,I,iFAGNC,KAAKC,e,+JAGLC,QAAQC,IAAI,W,KACZC,Q,SACQC,IAAaC,mBAAmBC,YACpCC,oB,mCAEIH,IAAaI,kBAAkBF,YACnCC,oB,oCAEIH,IAAaK,eAAeH,YAChCC,oB,+CAEI,WACN,EAAKG,QACLC,MAAM,S,KAZAC,I,gBAULC,K,gRAMGC,EAAYlB,SAASmB,cAAc,QAC/BC,MAAMC,SAAW,WAC3BrB,SAASsB,KAAKC,OAAOL,G,SACgBf,KAAKqB,oB,OAApCC,E,OACAC,EAAc,IAAIlB,IAAoBiB,EAAwB,IAGpEzB,SAASsB,KAAKC,OAAO,UACrBlB,QAAQC,IAAI,WACRqB,GAAOA,EAAMC,SACbC,GAAQA,EAAOD,SACfE,GAAI,E,oHAEQtB,IAAmB,EAAKuB,KAAKC,MAAMC,iB,cAAjDN,E,OAEAE,EAASrB,IAA8BmB,GAEjCO,EAAc,CAAEC,MAAOR,EAAMQ,MAAOC,OAAQT,EAAMS,QACxD5B,IAAwBqB,EAAQK,G,SACP1B,IACPmB,GACfU,oBACAC,sB,OAHGC,E,OAIAC,EAAoBhC,IAAsB+B,EAAYL,GAC5CM,EAAkBC,KAAI,SAAAC,GAAC,OACrChB,EAAYiB,cAAcD,EAAEE,eAEtBC,SAAQ,SAACC,EAAQC,GACvB,IAAMC,EAAMR,EAAkBO,GAAGE,UAAUD,IAC3B,IAAIxC,IAAa0C,QAAQF,EAAK,CAC5CG,MAAOL,EAAOM,aAERC,KAAKxB,GACTiB,EAAOQ,SAAW,KACpBjD,QAAQC,IAAIwC,EAAOK,OACnBpC,MAAM+B,EAAOK,W,uDAvBZrB,E,8NAwCP,OAAOvB,QAAQS,IAVA,CACb,cACA,kBACA,iBACA,UACA,aACA,OACA,aACA,oBAGOyB,IAAP,uCAAW,WAAMU,GAAN,qBAAAI,EAAA,sDACHC,EAAe,GACZT,EAAI,EAFJ,YAEOA,GAAK,GAFZ,iCAGWvC,IAChBG,YAAA,0BAA4CwC,EAA5C,YAAqDJ,EAArD,SAJK,cAGDU,EAHC,gBAMkBjD,IACLiD,GACjBpB,oBACAqB,qBATI,OAMDnB,EANC,OAUPiB,EAAaG,KAAKpB,EAAWK,YAVtB,QAEeG,IAFf,gDAaF,IAAIvC,IAA+B2C,EAAOK,IAbxC,4CAAX,0D,+BAwBF,OACE,yBAAKI,UAAU,OACb,kBAAC,IAAD,CACEC,OAAO,EACPC,iBAVmB,CACvB3B,MAAO,IACPC,OAAQ,IACR2B,WAAY,QAQRC,IAAI,e,GA3GmBC,cCKbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASxE,SAASC,eAAe,SD6H3C,kBAAmBwE,WACrBA,UAAUC,cAAcC,MAAM1D,MAAK,SAAA2D,GACjCA,EAAaC,kB","file":"static/js/main.d6dcff41.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport Webcam from \"react-webcam\";\nimport \"./App.css\";\nimport * as faceapi from \"face-api.js\";\n\nconst imageUpload = document.getElementById(\"imageUpload\");\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n  }\n  componentDidMount() {\n    this.loadModels();\n  }\n  async loadModels() {\n    console.log(\"Loading\");\n    Promise.all([\n      await faceapi.nets.faceRecognitionNet.loadFromUri(\n        process.env.PUBLIC_URL + \"/models\"\n      ),\n      await faceapi.nets.faceLandmark68Net.loadFromUri(\n        process.env.PUBLIC_URL + \"/models\"\n      ),\n      await faceapi.nets.ssdMobilenetv1.loadFromUri(\n        process.env.PUBLIC_URL + \"/models\"\n      )\n    ]).then(() => {\n      this.start();\n      alert(\"Done\");\n    });\n  }\n  async start() {\n    const container = document.createElement(\"div\");\n    container.style.position = \"relative\";\n    document.body.append(container);\n    const labeledFaceDescriptors = await this.loadLabeledImages();\n    const faceMatcher = new faceapi.FaceMatcher(labeledFaceDescriptors, 0.8);\n    let image;\n    let canvas;\n    document.body.append(\"Loaded\");\n    console.log(\"Started\");\n    if (image) image.remove();\n    if (canvas) canvas.remove();\n    let k = true;\n    while (k) {\n      image = await faceapi.fetchImage(this.refs.video.getScreenshot());\n\n      canvas = faceapi.createCanvasFromMedia(image);\n\n      const displaySize = { width: image.width, height: image.height };\n      faceapi.matchDimensions(canvas, displaySize);\n      const detections = await faceapi\n        .detectAllFaces(image)\n        .withFaceLandmarks()\n        .withFaceDescriptors();\n      const resizedDetections = faceapi.resizeResults(detections, displaySize);\n      const results = resizedDetections.map(d =>\n        faceMatcher.findBestMatch(d.descriptor)\n      );\n      results.forEach((result, i) => {\n        const box = resizedDetections[i].detection.box;\n        const drawBox = new faceapi.draw.DrawBox(box, {\n          label: result.toString()\n        });\n        drawBox.draw(canvas);\n        if (result.distance > 0.6) {\n          console.log(result.label);\n          alert(result.label);\n        }\n      });\n    }\n  }\n\n  loadLabeledImages() {\n    const labels = [\n      \"Black Widow\",\n      \"Captain America\",\n      \"Captain Marvel\",\n      \"Hawkeye\",\n      \"Jim Rhodes\",\n      \"Thor\",\n      \"Tony Stark\",\n      \"Sofiane Khoudour\"\n    ];\n    return Promise.all(\n      labels.map(async label => {\n        const descriptions = [];\n        for (let i = 1; i <= 1; i++) {\n          const img = await faceapi.fetchImage(\n            process.env.PUBLIC_URL + `/labeled_images/${label}/${i}.jpg`\n          );\n          const detections = await faceapi\n            .detectSingleFace(img)\n            .withFaceLandmarks()\n            .withFaceDescriptor();\n          descriptions.push(detections.descriptor);\n        }\n\n        return new faceapi.LabeledFaceDescriptors(label, descriptions);\n      })\n    );\n  }\n  render() {\n    const videoConstraints = {\n      width: 640,\n      height: 640,\n      facingMode: \"user\"\n    };\n\n    return (\n      <div className=\"App\">\n        <Webcam\n          audio={false}\n          videoConstraints={videoConstraints}\n          ref=\"video\"\n        ></Webcam>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}